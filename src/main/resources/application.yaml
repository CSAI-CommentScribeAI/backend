server:
  port: 9000

spring:
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver

  security:
    user:
      name: user
      password: password
    login:
      page: /login
    logout:
      url: /logout
      success-url: /login?logout

  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  redis:
    host: redis
    port: 6379
    password: ${REDIS_PASSWORD}
    jedis:
      pool:
        max-active: 10
        max-idle: 5
        min-idle: 0
        max-wait: -1ms


  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: update
    open-in-view: false
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100

  h2.console.enabled: true
#AWS 액세스 IAMMUSER 정보
cloud:
  aws:
    credentials:
      # 환경 변수 또는 보안 저장소에서 액세스 키 및 시크릿 키 가져오기
      accessKey: ${ACCESSKEY}
      secretKey: ${SECRETKEY}
    # S3 버킷의 정보
    s3:
      bucket:
      # 올바른 S3 버킷 이름으로 변경
        bucket-name: ${S3_BUCKET}
    region:
      # 올바른 리전 이름으로 변경
      static: ${REGION}

    stack:
      auto: false

  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 15MB

  sql:
    init:
      mode: always

  data:
    rest:
      base-path: /api
      detection-strategy: annotated

  thymeleaf3:
    decoupled-logic: true

logging:
  level:
    com.springboot.board: debug
    org.springframework.web.servlet: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

management:
  endpoints:
    web:
      exposure:
        include: "*"

debug: false

jwt:
  secret: ${JWT_SECRET}
