server:
  port: 9000

spring:
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
  servlet:
    multipart:
      enabled: true
      max-file-size: 40MB
      max-request-size: 40MB

  security:
    user:
      name: user
      password: password
    login:
      page: /login
    logout:
      url: /logout
      success-url: /login?logout

    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}  # 필요한 경우
            client-name: kakao
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:9000/login/oauth2/code/kakao
            client-authentication-method: POST
            scope: profile_nickname, account_email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-name: naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:9000/login/oauth2/code/naver
            scope: name, email, nickname
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-name: google
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:9000/login/oauth2/code/google
            scope: profile, email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response



  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  redis:
    host: redis
    port: 6379
    password: ${REDIS_PASSWORD}
    jedis:
      pool:
        max-active: 10
        max-idle: 5
        min-idle: 0
        max-wait: -1ms


  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: update
    open-in-view: false
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100

  h2.console.enabled: true
#AWS 액세스 IAMMUSER 정보
cloud:
  aws:
    credentials:
      # 환경 변수 또는 보안 저장소에서 액세스 키 및 시크릿 키 가져오기
      accessKey: ${ACCESSKEY}
      secretKey: ${SECRETKEY}
    # S3 버킷의 정보
    s3:
      bucket:
      # 올바른 S3 버킷 이름으로 변경
        bucket-name: ${S3_BUCKET}
    region:
      # 올바른 리전 이름으로 변경
      static: ${REGION}

    stack:
      auto: false

  sql:
    init:
      mode: always

  data:
    rest:
      base-path: /api
      detection-strategy: annotated

  thymeleaf3:
    decoupled-logic: true

logging:
  level:
    com.springboot.board: debug
    org.springframework.web.servlet: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

management:
  endpoints:
    web:
      exposure:
        include: "*"

debug: false

jwt:
  secret: ${JWT_SECRET}

payment:
  toss:
    test_client_api_key : ${TOSS_TEST_CLIENT_APIKEY}
    test_secrete_api_key : ${TOSS_TEST_SECRET_APIKEY}
    success_url : ${TOSS_SUCCESS_URL}
    fail_url : ${TOSS_FAIL_URL}